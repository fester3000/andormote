package andro_mote.hello_world;

import java.io.Serializable;

import andro_mote.commons.IntentsFieldsIdentifiers;
import andro_mote.commons.IntentsIdentifiers;
import andro_mote.commons.Packet;
import andro_mote.commons.PacketType;
import andro_mote.commons.PacketType.Engine;
import andro_mote.commons.PacketType.Motion;
import andro_mote.engine.api.AndroMoteEngineControllerApi;
import andro_mote.models.NewBrightModel;
import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;

/**
 * Aplikaja HelloWorld dla AndroMote.
 * 
 * @author Maciej Gzik
 * 
 */
public class AndroMoteHelloWorldActivity extends Activity implements OnClickListener {

	private Button moveForwardButton = null;
	private Button moveBackwardButton = null;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		this.initComponents();

		AndroMoteEngineControllerApi.startEngineService(this.getApplication(), NewBrightModel.class);

		// this.startEngineService();
	}

	@Override
	protected void onDestroy() {
		Log.d("test", "onDestroy");
		stopEngineService();
		super.onDestroy();
	}

	/**
	 * Inicjalizacja komponentów układu graficznego
	 */
	private void initComponents() {
		this.moveForwardButton = (Button) findViewById(R.id.moveForwardButton);
		this.moveBackwardButton = (Button) findViewById(R.id.moveBackwardButton);
		this.moveForwardButton.setOnClickListener(this);
		this.moveBackwardButton.setOnClickListener(this);
	}

	/**
	 * Start i ustawienia początkowe steronika silników.
	 */
	private void startEngineService() {
		// start serwisu silników
		Intent startEngineServiceIntent = new Intent(IntentsIdentifiers.ACTION_START_ENGINES_CONTROLLER);
		Packet pack = new Packet(PacketType.Connection.MODEL_NAME);
		pack.setDeviceName(NewBrightModel.class.getName());
		startEngineServiceIntent.putExtra(IntentsFieldsIdentifiers.EXTRA_PACKET, (Serializable) pack);
		startService(startEngineServiceIntent);

		// ustawienia silników w nowym wątku z powodu asynchronicznego wywołania
		// aktywacji usługi
		Thread t = new Thread() {
			public void run() {
				try {
					Thread.sleep(2000);

					initEngineService();
				} catch (InterruptedException e) {
					Log.e("HelloIOIO", e.getMessage(), e);
				}
			}
		};
		t.start();
	}

	/**
	 * Wstępna konfiguracja ustawień sterownika silników. Tryb ruchu - krokowy.
	 * Czas trwania jednego kroku - 500 ms. Prędkość tylnego silnika - 0,8.
	 */
	private void initEngineService() {
		this.sendPacketToEngineService(new Packet(Engine.SET_STEPPER_MODE));

		// zmiana czasu trwaniajednego węzła
		Packet stepDurationPacket = new Packet(Engine.SET_STEP_DURATION);
		stepDurationPacket.setStepDuration(500);
		this.sendPacketToEngineService(stepDurationPacket);

		Packet speedPacket = new Packet(Engine.SET_SPEED);
		speedPacket.setSpeed(0.8);
		this.sendPacketToEngineService(speedPacket);
	}

	/**
	 * Zatrzymanie serwisu kontroli silników. Po zakończeniu działania aplikacji
	 * konieczne jest zatrzymanie sterownika silników - najlepiej w metodzie
	 * onDestroy aktywności. Wynika to z konieczności zamknięcia połączenia z
	 * mikrokontrolerem przed kolejną próbą połaczenia.
	 */
	private void stopEngineService() {
		Intent closeService = new Intent(IntentsIdentifiers.ACTION_START_ENGINES_CONTROLLER);
		stopService(closeService);
	}

	/**
	 * Wysłanie pakietu do serwisu silników.
	 * 
	 * @param packet
	 *            Wysyłany pakiet {@link Packet}
	 */
	public void sendPacketToEngineService(Packet packet) {
		Intent broadcastEngine = new Intent(IntentsIdentifiers.ACTION_ENGINES_CONTROLLER_RECEIVER);
		broadcastEngine.putExtra(IntentsFieldsIdentifiers.EXTRA_PACKET, (Serializable) packet);
		sendBroadcast(broadcastEngine);
	}

	@Override
	public void onClick(View v) {
		if (v.getId() == R.id.moveForwardButton) {
			this.sendPacketToEngineService(new Packet(Motion.MOVE_FORWARD_REQUEST));
		} else if (v.getId() == R.id.moveBackwardButton) {
			this.sendPacketToEngineService(new Packet(Motion.MOVE_BACKWARD_REQUEST));
		}
	}

}
